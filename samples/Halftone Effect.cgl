shader main {
    vertex {
        input vec2 texCoord;
        // Simulated inputs
        input vec2 textureSize; // Size of the texture (width, height)
        input float dotSize;
        input vec4 textureData; // Example for a 512x512 texture
        output vec2 passTexCoord;


        void main() {
            passTexCoord = texCoord;
        }
    }

    fragment {
        input vec2 passTexCoord;
        // Simulated inputs
        input vec2 textureSize;
        input float dotSize;
        input vec4 textureData; // Example for a 512x512 texture
        output vec4 fragColor;

        vec4 texture(vec4 texData, vec2 coord, vec2 size) {
            // Convert coord to texture indices
            int x = int(coord.x * size.x);
            int y = int(coord.y * size.y);
            // Clamp the indices to texture dimensions
            x = clamp(x, 0, int(size.x) - 1);
            y = clamp(y, 0, int(size.y) - 1);
            // Calculate the 1D array index
            int index = y * int(size.x) + x;
            // Return the color from the texture data
            return texData;
        }

        void main() {
            // Scale texture coordinates by dotSize
            vec2 uv = passTexCoord * dotSize;

            // Calculate angle and radius for the dot pattern
            float angle = mod(uv.x + uv.y, 2.0) * 3.14159265;
            float radius = length(fract(uv) - vec2(0.5));

            // Sample color from texture using the simulated texture function
            vec4 color = texture(textureData, passTexCoord, textureSize);

            // Calculate intensity based on luminance
            float intensity = dot(color.rgb, vec3(0.299, 0.587, 0.114));

            // Compute dot pattern using smoothstep for edge softness
            float dot = smoothstep(0.4, 0.5, sin(angle) * 0.5 + radius);

            // Set fragment color with dot pattern applied
            fragColor = vec4(vec3(dot * intensity), 1.0);
        }
    }
}

#version 450


// Vertex shader

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoord;
out vec4 color;

float calculateLighting(vec3 normal, vec3 lightDir) {
    float diff = max(dot(normal, lightDir), 0.0);
    return diff;
}
vec4 textureColor(vec2 coord) {
    return vec4(coord, 0.5, 1.0);
}
void main() {
    vec3 hardcodedNormal = vec3(0.0, 0.0, 1.0);
    vec3 hardcodedLightDir = vec3(1.0, 1.0, 1.0);
    vec3 normal = hardcodedNormal;
    vec3 lightDir = hardcodedLightDir;
    float lightIntensity = calculateLighting(normal, lightDir);
    vec4 texColor = textureColor(texCoord);
    color = (texColor * lightIntensity);
    color = texCoord;
}

// Fragment shader

in vec4 color;
layout(location = 0) out vec4 fragColor;

void main() {
    fragColor = color;
}

shader advancedShader {
    vertex {
        input vec3 position;
        input vec2 texCoord;
        output vec2 fragTexCoord;
        output vec3 fragPosition;

        void main() {
            fragTexCoord = texCoord;
            fragPosition = position;
            gl_Position = vec4(position, 1.0);
        }
    }

    fragment {
        input vec2 fragTexCoord;
        input vec3 fragPosition;
        output vec4 fragColor;

        vec3 calculateSpecular(vec3 normal, vec3 lightDir, vec3 viewDir) {
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);  // Default shininess
            return spec * vec3(1.0, 1.0, 1.0);  // White specular highlight
        }

        void main() {
            vec4 texColor = texture2D(textureSampler, fragTexCoord); // Default sampler

            vec3 norm = normalize(cross(dFdx(fragPosition), dFdy(fragPosition)));
            vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0) - fragPosition); // Default light position
            vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0) - fragPosition); // Default view position

            // Ambient component
            vec3 ambient = vec3(0.1, 0.1, 0.1);  // Default ambient color

            // Diffuse component
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 diffuse = diff * vec3(1.0, 1.0, 1.0);  // White diffuse light

            // Specular component
            vec3 specular = calculateSpecular(norm, lightDir, viewDir);

            vec3 lighting = ambient + diffuse + specular;
            vec4 color = vec4(lighting, 1.0) * texColor;

            fragColor = color;
        }
    }
}
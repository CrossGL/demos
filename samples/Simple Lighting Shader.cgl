shader main{
    vertex {
        input vec3 position;
        input vec2 texCoord;
        input vec3 normal;

        // Vertex shader code
        // Example:
        // Pass texCoord and normal to the fragment shader
        // gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }

    fragment {
        input vec3 position;
        input vec2 texCoord;
        input vec3 normal;
        output vec4 fragColor;

        vec3 calculateSpecular(vec3 normal, vec3 lightDir, vec3 viewDir) {
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
            return spec * vec3(1.0, 1.0, 1.0) * specularIntensity;
        }

        void main() {
            vec4 texColor = texture2D(texture, texCoord);
            vec3 lightDir = normalize(lightPos - position);
            vec3 viewDir = normalize(viewPos - position);

            vec3 ambient = ambientColor;
            vec3 diffuse = texColor.rgb;
            vec3 specular = vec3(0.0);

            // Outer loop
            for (int i = 0; i < outerIterations; i++) {
                // Inner loop
                for (int j = 0; j < innerIterations; j++) {
                    // Compute lighting
                    vec3 tempSpecular = calculateSpecular(normal, lightDir, viewDir);
                    specular += tempSpecular;
                }

                // Reduce diffuse intensity progressively
                diffuse *= 0.9;
            }

            vec3 lighting = ambient + diffuse + specular;
            fragColor = vec4(lighting, 1.0);
        }
    }
}
}
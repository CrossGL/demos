shader main {
    vertex {
        input vec3 position;
        input vec3 normal;
        output vec3 fragPosition;
        output vec3 fragNormal;

        // Inputs for vertex shader
        void main() {
            // Pass position and normal to fragment shader
            fragPosition = position;
            fragNormal = normal;

            // Set the position of the vertex
            gl_Position = vec4(position, 1.0);
        }
    }

    fragment {
        input vec3 fragPosition;
        input vec3 fragNormal;
        output vec4 fragColor;


        void main() {
            // Calculate lighting
            // Define constant light and view positions for this shader
            vec3 lightPos = vec3(1.0, 1.0, 1.0);  // Example light position
            vec3 viewPos = vec3(0.0, 0.0, 1.0);   // Example view position
            vec3 norm = normalize(fragNormal);
            vec3 lightDir = normalize(lightPos - fragPosition);
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 wayDir = normalize(lightDir + viewPos - fragPosition);
            float spec = pow(max(dot(norm, wayDir), 0.0), 32.0);
            vec3 color = vec3(0.5, 0.5, 0.5) + diff + spec;

            // Output the final color
            fragColor = vec4(color, 1.0);
        }
    }
}

shader complexShader {
    vertex {
        input vec3 position;
        input vec2 texCoord;
        output vec2 fragTexCoord;
        output vec3 fragPosition;

        void main() {
            fragTexCoord = texCoord;
            fragPosition = position; // Directly pass position to fragment shader
            gl_Position = vec4(position, 1.0);
        }
    }

    fragment {
        input vec2 fragTexCoord;
        input vec3 fragPosition;
        output vec4 fragColor;

        vec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 viewDir) {
            float ambientStrength = 0.1;
            vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0); // Default light color

            float diff = max(dot(normal, lightDir), 0.0);
            vec3 diffuse = diff * vec3(1.0, 1.0, 1.0); // Default light color

            float specularStrength = 0.5;
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
            vec3 specular = specularStrength * spec * vec3(1.0, 1.0, 1.0); // Default light color

            return ambient + diffuse + specular;
        }

        void main() {
            vec4 texColor = texture2D(textureSampler, fragTexCoord); // Assumed default sampler
            vec3 normal = normalize(cross(dFdx(fragPosition), dFdy(fragPosition)));
            vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0)); // Default light direction
            vec3 viewDir = normalize(-fragPosition); // Simple view direction

            vec3 lighting = calculateLighting(normal, lightDir, viewDir);
            vec4 color = vec4(lighting, 1.0) * texColor;

            fragColor = color;
        }
    }
}
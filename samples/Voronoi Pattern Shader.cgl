shader main {
vertex {
    input vec2 texCoord;
    output vec2 fragTexCoord;

    void main() {
        fragTexCoord = texCoord * 10.0; // Scale texture coordinates
    }
}

fragment {
    input vec2 fragTexCoord;
    output vec4 fragColor;

    float hash(vec2 p) {
        p = fract(p * vec2(123.34, 456.21));
        p += dot(p, p + 34.56);
        return fract(p * p);
    }

    vec2 random2(vec2 p) {
        return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);
    }

    float voronoi(vec2 p) {
        vec2 g = floor(p);
        vec2 f = fract(p);

        for (int j = -1; j < 1; j++) {
            for (int i = -1; i < 1; i++) {
                vec2 b = vec2(i,j);
                vec2 r = b - f + random2(g + b);
                float d2 = dot(r, r);

                if (d2 < d) {
                    d = d2;
                }
            }
        }

        return d;
    }

    void main() {
        float v = voronoi(fragTexCoord);
        vec3 color = vec3(v);
        fragColor = vec4(color, 1.0);
    }
}
}

shader main {
vertex {
    input vec3 position;
    input vec3 normal;
    output vec3 fragPosition;
    output vec3 fragNormal;

    void main() {
        fragPosition = position;
        fragNormal = normal;
    }
}

fragment {
    input vec3 fragPosition;
    input vec3 fragNormal;
    output vec4 fragColor;

    void main() {
        vec3 norm = normalize(fragNormal);

        // Hardcoded light and view positions
        vec3 lightPos = vec3(1.0, 1.0, 1.0);  // Light position
        vec3 viewPos = vec3(0.0, 0.0, 1.0);   // View position

        vec3 lightDir = normalize(lightPos - fragPosition);
        float diff = max(dot(norm, lightDir), 0.0);

        // Calculate the halfway vector
        vec3 viewDir = normalize(viewPos - fragPosition);
        vec3 halfwayDir = normalize(lightDir + viewDir);

        // Calculate specular lighting
        float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0);

        // Combine diffuse and specular components
        vec3 color = vec3(0.5, 0.5, 0.5) * diff + vec3(1.0, 1.0, 1.0) * spec;
        fragColor = vec4(color, 1.0);
    }
}
}
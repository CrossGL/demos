shader main {
    input vec3 position;
    input vec3 normal;
    input vec2 texCoord;
    output vec4 fragColor;

    uniform sampler2D texture;
    uniform sampler2D normalMap;
    uniform vec3 lightPos;

    void main() {
        // Fetch and normalize the normal from the normal map
        vec3 norm = normalize(texture(normalMap, texCoord).rgb * 2.0 - 1.0);
        
        // Calculate the direction from the fragment to the light
        vec3 lightDir = normalize(lightPos - position);
        
        // Compute the diffuse lighting term
        float diff = max(dot(norm, lightDir), 0.0);
        
        // Fetch the color from the texture and apply the diffuse lighting
        vec3 color = texture(texture, texCoord).rgb * diff;
        
        // Output the final color with full opacity
        fragColor = vec4(color, 1.0);
    }
}

shader main {
    vertex {
        input vec2 texCoord;
        output vec2 passTexCoord;

        // Pass through the texture coordinate
        void main() {
            passTexCoord = texCoord;
        }
    }

    fragment {
        input vec2 passTexCoord;
        

        // Simulated inputs
        input vec4 textureData; // Example for a 512x512 texture
        input int textureWidth;
        input int textureHeight;
        input float time; // Simulated uniform
        output vec4 fragColor;

        vec4 texture(vec4 texData, vec2 coord, int width, int height) {
            // Convert coord to texture indices
            int x = int(coord.x * float(width));
            int y = int(coord.y * float(height));
            // Clamp the indices to texture dimensions
            x = clamp(x, 0, width - 1);
            y = clamp(y, 0, height - 1);
            // Calculate the 1D array index
            int index = y * width + x;
            // Return the color from the texture data
            return texData;
        }

        void main() {
            vec2 uv = passTexCoord;

            // Apply the time-based distortion
            if (fract(time * 10.0) < 0.5) {
                uv.x += sin(passTexCoord.y * 10.0) * 0.1;
            }

            // Sample the texture using the simulated texture function
            vec4 color = texture(textureData, uv, textureWidth, textureHeight);
            fragColor = color;
        }
    }
}

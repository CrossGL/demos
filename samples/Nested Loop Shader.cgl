shader nestedLoopsShader {
    vertex {
        input vec3 position;
        input vec2 texCoord;
        input vec3 normal;
        output vec4 color;

        uniform sampler2D texture;
        uniform vec3 lightPos;
        uniform vec3 viewPos;
        uniform vec3 ambientColor;
        uniform float shininess;
        uniform float specularIntensity;
        uniform int outerIterations;
        uniform int innerIterations;

        vec3 calculateSpecular(vec3 normal, vec3 lightDir, vec3 viewDir) {
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
            return spec * vec3(1.0, 1.0, 1.0) * specularIntensity;
        }

        void main() {
            // Pass texture coordinates and normals to the fragment shader
            color.xy = texCoord;
            color.zw = normal;

            // Pass other uniforms directly
            color.a = 1.0; // Alpha channel
        }
    }

    fragment {
        input vec4 color;
        input vec2 texCoord;
        output vec4 fragColor;

        uniform sampler2D texture;
        uniform vec3 lightPos;
        uniform vec3 viewPos;
        uniform vec3 ambientColor;
        uniform float shininess;
        uniform float specularIntensity;
        uniform int outerIterations;
        uniform int innerIterations;

        vec3 calculateSpecular(vec3 normal, vec3 lightDir, vec3 viewDir) {
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
            return spec * vec3(1.0, 1.0, 1.0) * specularIntensity;
        }

        void main() {
            vec4 texColor = texture(texture, texCoord);
            vec3 lightDir = normalize(lightPos - color.xyz);
            vec3 viewDir = normalize(viewPos - color.xyz);

            vec3 ambient = ambientColor;
            vec3 diffuse = texColor.rgb;
            vec3 specular = vec3(0.0);

            // Outer loop
            for (int i = 0; i < outerIterations; i++) {
                // Inner loop
                for (int j = 0; j < innerIterations; j++) {
                    // Compute lighting
                    vec3 tempSpecular = calculateSpecular(color.zw, lightDir, viewDir);
                    specular += tempSpecular;
                }

                // Reduce diffuse intensity progressively
                diffuse *= 0.9;
            }

            vec3 lighting = ambient + diffuse + specular;
            fragColor = vec4(lighting, 1.0);
        }
    }
}

shader main {
    vertex {
        input vec3 position;
        input vec3 normal;
        // Simulated inputs
        input vec3 lightPos;
        input vec3 viewPos;
        input float metallic;
        output vec4 color;

        vec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 viewDir) {
            float ambient = 0.1;
            float diff = max(dot(normal, lightDir), 0.0);
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
            return ambient + diff + metallic * spec;
        }

        void main() {
            vec3 norm = normalize(normal);
            vec3 lightDir = normalize(lightPos - position);
            vec3 viewDir = normalize(viewPos - position);
            vec3 lighting = calculateLighting(norm, lightDir, viewDir);
            color.rgb = vec3(1.0, 0.8, 0.6) * lighting;
            color.a = 1.0; // Alpha channel
        }
    }

    fragment {
        input vec4 color;
        output vec4 fragColor;

        void main() {
            fragColor = color;
        }
    }
}

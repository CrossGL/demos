shader main {
    vertex {
        input vec2 texCoord;
        output vec2 passTexCoord;

        void main() {
            passTexCoord = texCoord;
        }
    }

    fragment {
        input vec2 passTexCoord;
        

        // Simulated input values
        input vec4 textureData; // Example for a 512x512 texture
        input vec4 displacementMapData; // Example for a 512x512 displacement map
        input int textureWidth;
        input int textureHeight;
        input float displacementFactor;
        output vec4 fragColor;

        vec4 texture(vec4 texData, vec2 coord, int width, int height) {
            // Convert coord to texture indices
            int x = int(coord.x * float(width));
            int y = int(coord.y * float(height));
            // Clamp the indices to texture dimensions
            x = clamp(x, 0, width - 1);
            y = clamp(y, 0, height - 1);
            // Calculate the 1D array index
            int index = y * width + x;
            // Return the color from the texture data
            return texData;
        }

        void main() {
            vec2 texCoord = passTexCoord;
            vec2 displacement = texture(displacementMapData, texCoord, textureWidth, textureHeight);
            displacement = displacement.rg * 2.0 - 1.0;
            vec2 uv = texCoord + displacement * displacementFactor;
            vec4 color = texture(textureData, uv, textureWidth, textureHeight);
            fragColor = vec4(color.rgb, 1.0);
        }
    }
}

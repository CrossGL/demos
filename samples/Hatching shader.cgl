shader main {
    vertex {
        input vec2 texCoord;
        // Simulated thresholds
        input float threshold1;
        input float threshold2;
        input float threshold3;
        


        // Simulated texture data
        input vec4 textureData; // Example for a 512x512 texture
        input vec2 textureSize; // Size of the texture (width, height)
        output vec2 passTexCoord;

        void main() {
            passTexCoord = texCoord;
        }
    }

    fragment {
        input vec2 passTexCoord;
        

        // Simulated thresholds
        input float threshold1;
        input float threshold2;
        input float threshold3;

        // Simulated texture data
        input vec4 textureData; // Example for a 512x512 texture
        input vec2 textureSize; // Size of the texture (width, height)
        output vec4 fragColor;

        vec4 texture(vec4 texData, vec2 coord, vec2 size) {
            // Convert coord to texture indices
            int x = int(coord.x * size.x);
            int y = int(coord.y * size.y);
            // Clamp the indices to texture dimensions
            x = clamp(x, 0, int(size.x) - 1);
            y = clamp(y, 0, int(size.y) - 1);
            // Calculate the 1D array index
            int index = y * int(size.x) + x;
            // Return the color from the texture data
            return texData;
        }

        void main() {
            // Sample color from texture using the simulated texture function
            vec4 color = texture(textureData, passTexCoord, textureSize);

            // Calculate intensity based on luminance
            float intensity = dot(color.rgb, vec3(0.299, 0.587, 0.114));

            // Determine hatching color based on thresholds
            vec3 hatching = vec3(1.0);
            if (intensity < threshold1) {hatching = vec3(0.8);}
            if (intensity < threshold2) {hatching = vec3(0.6);}
            if (intensity < threshold3) {hatching = vec3(0.4);}
            else {hatching = vec3(0.2);}

            // Set the fragment color
            fragColor = vec4(hatching, 1.0);
        }
    }
}

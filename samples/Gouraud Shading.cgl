shader main {
    vertex {
        input vec3 position;
        input vec3 normal;
        // Simulated light position
        input vec3 lightPos;
        output vec3 passPosition;
        output vec3 passNormal;
        output vec3 passLightPos;

        void main() {
            passPosition = position;
            passNormal = normal;
            passLightPos = lightPos;
        }
    }

    fragment {
        input vec3 passPosition;
        input vec3 passNormal;
        input vec3 passLightPos;
        output vec4 fragColor;

        void main() {
            vec3 norm = normalize(passNormal);
            vec3 lightDir = normalize(passLightPos - passPosition);
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 color = vec3(0.5, 0.5, 0.5) + diff;
            fragColor = vec4(color, 1.0);
        }
    }
}
